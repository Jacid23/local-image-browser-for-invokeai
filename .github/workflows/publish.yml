name: Build and publish release

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    name: Build and publish (Windows)
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate release notes
        shell: bash
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Generating release notes for version $VERSION"
          node generate-release.js $VERSION

      - name: Build and publish installer
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting build process..."
          npm run build
          echo "Build completed, checking dist folder..."
          ls -la dist/
          echo "Starting electron-builder..."
          npx electron-builder --publish=never

      - name: Create GitHub Release
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          RELEASE_NOTES_FILE="release-v$VERSION.md"

          echo "Checking if release v$VERSION already exists..."
          if gh release view v$VERSION >/dev/null 2>&1; then
            echo "Release v$VERSION already exists. Uploading assets to existing release..."
            # Upload assets to existing release
            if [ -d "dist-electron" ]; then
              for file in dist-electron/*; do
                if [ -f "$file" ]; then
                  echo "Uploading $file to existing release..."
                  gh release upload v$VERSION "$file" --clobber
                fi
              done
            fi
          else
            echo "Creating new release v$VERSION..."
            if [ -f "$RELEASE_NOTES_FILE" ]; then
              gh release create v$VERSION \
                --title "Local Image Browser for InvokeAI v$VERSION" \
                --notes-file "$RELEASE_NOTES_FILE" \
                --generate-notes
            else
              echo "Release notes file not found, creating basic release..."
              gh release create v$VERSION \
                --title "Local Image Browser for InvokeAI v$VERSION" \
                --generate-notes
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List dist-electron contents (for debug)
        shell: bash
        if: always()
        run: |
          echo "== Build artifacts =="
          if [ -d "dist-electron" ]; then
            echo "dist-electron contents:"
            ls -lh dist-electron/
          else
            echo "dist-electron directory not found!"
            echo "Checking if dist exists:"
            ls -la dist/ 2>/dev/null || echo "dist directory also not found!"
          fi

      - name: List dist-electron contents (for debug)
        shell: bash
        if: always()
        run: |
          echo "== Build artifacts =="
          if [ -d "dist-electron" ]; then
            echo "dist-electron contents:"
            ls -lh dist-electron/
          else
            echo "dist-electron directory not found!"
            echo "Checking if dist exists:"
            ls -la dist/ 2>/dev/null || echo "dist directory also not found!"
          fi
